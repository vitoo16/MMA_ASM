import { Ionicons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import { router, useFocusEffect } from "expo-router";
import React, { useCallback, useEffect, useRef, useState } from "react";
import {
  ActivityIndicator,
  Image,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";

import { GradientBackground } from "@/components/GradientBackground";
import { apiService } from "@/services/api";
import { favoritesService } from "@/services/favorites";
import { Product } from "@/types/product";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(
  process.env.EXPO_PUBLIC_GEMINI_API_KEY || ""
);

interface Message {
  role: "user" | "assistant";
  text: string | React.ReactNode;
}

export default function AIChatbotScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n üé®. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n so s√°nh, g·ª£i √Ω ho·∫∑c t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m b·∫°n y√™u th√≠ch. B·∫°n mu·ªën h·ªèi g√¨ h√¥m nay?",
    },
  ]);
  const [input, setInput] = useState("");
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [imageBase64, setImageBase64] = useState<string | null>(null);
  // H√†m ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
      base64: true,
    });
    if (!result.canceled && result.assets && result.assets.length > 0) {
      // Hi·ªÉn th·ªã ·∫£nh v·ª´a g·ª≠i l√™n chat
      setMessages((prev) => [
        ...prev,
        {
          role: "user",
          text: (
            <Image
              source={{ uri: result.assets[0].uri }}
              style={{ width: 200, height: 200, borderRadius: 12 }}
            />
          ),
        },
      ]);

      // Tr·∫£ v·ªÅ th√¥ng b√°o AI ch∆∞a h·ªó tr·ª£ ph√¢n t√≠ch h√¨nh ·∫£nh v√† g·ª£i √Ω s·∫£n ph·∫©m
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          text: (
            <View style={{ marginTop: 8 }}>
              <Text
                style={{
                  color: "#6366F1",
                  fontWeight: "bold",
                  fontSize: 16,
                  marginBottom: 6,
                }}
              >
                AI ch∆∞a h·ªó tr·ª£ ph√¢n t√≠ch h√¨nh ·∫£nh, nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ h·ªèi v·ªÅ
                s·∫£n ph·∫©m ho·∫∑c nh·∫≠n g·ª£i √Ω!
              </Text>
              {allProducts.length > 0 && (
                <Text
                  style={{ marginBottom: 8, color: "#374151", fontSize: 15 }}
                >
                  M·ªôt s·ªë s·∫£n ph·∫©m n·ªïi b·∫≠t:
                </Text>
              )}
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={{ marginBottom: 2 }}
                contentContainerStyle={{ gap: 12, paddingRight: 12 }}
              >
                {allProducts.slice(0, 10).map((p, idx) => (
                  <TouchableOpacity
                    key={p.id}
                    onPress={() => router.push(`/product/${p.id}` as any)}
                    style={{
                      backgroundColor: "#F3F4F6",
                      borderRadius: 18,
                      paddingHorizontal: 14,
                      paddingVertical: 12,
                      alignItems: "center",
                      shadowColor: "#000",
                      shadowOffset: { width: 0, height: 2 },
                      shadowOpacity: 0.12,
                      shadowRadius: 4,
                      elevation: 2,
                      minWidth: 90,
                      marginRight: 0,
                    }}
                  >
                    {/* N·∫øu c√≥ h√¨nh ·∫£nh s·∫£n ph·∫©m th√¨ hi·ªÉn th·ªã, n·∫øu kh√¥ng th√¨ icon */}
                    {p.image ? (
                      <Image
                        source={{ uri: p.image }}
                        style={{
                          width: 40,
                          height: 40,
                          borderRadius: 12,
                          marginBottom: 6,
                        }}
                      />
                    ) : (
                      <Ionicons
                        name="color-palette"
                        size={28}
                        color="#6366F1"
                        style={{ marginBottom: 6 }}
                      />
                    )}
                    <Text
                      style={{
                        color: "#1F2937",
                        fontWeight: "bold",
                        fontSize: 14,
                        textAlign: "center",
                      }}
                    >
                      {p.artName}
                    </Text>
                    <Text
                      style={{
                        color: "#6B7280",
                        fontSize: 12,
                        marginTop: 2,
                        textAlign: "center",
                      }}
                    >
                      {p.brand}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          ),
        },
      ]);
    }
  };
  const [loading, setLoading] = useState(false);
  const [allProducts, setAllProducts] = useState<Product[]>([]);
  const [favoriteProducts, setFavoriteProducts] = useState<Product[]>([]);
  const scrollViewRef = useRef<ScrollView>(null);

  // Load products from API
  const loadProducts = async () => {
    try {
      const products = await apiService.getProducts();
      setAllProducts(products);

      const favIds = await favoritesService.getFavorites();
      const favProducts = products.filter((p) => favIds.includes(p.id));
      setFavoriteProducts(favProducts);
    } catch (error) {
      console.error(error);
    }
  };

  // Reset scroll position when tab comes into focus
  useFocusEffect(
    useCallback(() => {
      scrollViewRef.current?.scrollTo({ y: 0, animated: false });
    }, [])
  );

  useEffect(() => {
    loadProducts();
  }, []);

  const handleSend = useCallback(async () => {
    if (!input.trim()) return;
    const newUserMsg: Message = { role: "user", text: input.trim() };
    setMessages((prev) => [...prev, newUserMsg]);
    setInput("");
    setLoading(true);

    try {
      // 3Ô∏è‚É£ Personality cho AI
      const personality = [
        "B·∫°n th√≠ch v·∫Ω v√† th∆∞·ªùng khen ng∆∞·ªùi d√πng s√°ng t·∫°o.",
        "B·∫°n ƒë√¥i khi th√™m emoji ƒë·ªÉ th·ªÉ hi·ªán c·∫£m x√∫c üòäüé®.",
        "Khi ng∆∞·ªùi d√πng c√≥ v·∫ª bu·ªìn, b·∫°n kh√≠ch l·ªá nh·∫π nh√†ng.",
        "Khi ng∆∞·ªùi d√πng h·ªèi linh tinh, b·∫°n c∆∞·ªùi nh·∫π r·ªìi k√©o v·ªÅ ch·ªß ƒë·ªÅ ngh·ªá thu·∫≠t.",
      ].join("\n");

      // 2Ô∏è‚É£ Context + Personality
      const context = `
${personality}
B·∫°n l√† tr·ª£ l√Ω AI vui t√≠nh, n√≥i chuy·ªán t·ª± nhi√™n nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n am hi·ªÉu ngh·ªá thu·∫≠t üé®. 
·ª®ng d·ª•ng c·ªßa b·∫°n chuy√™n b√°n c√°c s·∫£n ph·∫©m ngh·ªá thu·∫≠t nh∆∞: b√∫t m√†u, s∆°n, m√†u n∆∞·ªõc, c·ªç v·∫Ω, gi·∫•y v·∫Ω,...

‚öôÔ∏è NGUY√äN T·∫ÆC:
- Lu√¥n gi·ªØ gi·ªçng vƒÉn nh·∫π nh√†ng, th√¢n thi·ªán, c√≥ ch√∫t c·∫£m x√∫c v√† t·ª± nhi√™n nh∆∞ ng∆∞·ªùi th·∫≠t.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u v√¥ nghƒ©a ho·∫∑c kh√¥ng li√™n quan (v√≠ d·ª•: ‚Äútr·ªùi m∆∞a c√≥ bu·ªìn kh√¥ng?‚Äù), h√£y ph·∫£n h·ªìi d√≠ d·ªèm, 
  sau ƒë√≥ kh√©o l√©o chuy·ªÉn h∆∞·ªõng sang ch·ªß ƒë·ªÅ ngh·ªá thu·∫≠t ho·∫∑c s·∫£n ph·∫©m.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m, ch·ªâ n√≥i trong ph·∫°m vi s·∫£n ph·∫©m c√≥ trong app n√†y.
- N·∫øu ng∆∞·ªùi d√πng n√≥i v·ªÅ vi·ªác c·∫ßn ch·ªçn, so s√°nh, hay t√¨m c·∫£m h·ª©ng v·∫Ω, h√£y g·ª£i √Ω s·∫£n ph·∫©m c·ª• th·ªÉ trong app b·∫±ng c√∫ ph√°p [[T√™n s·∫£n ph·∫©m]].
- N·∫øu ng∆∞·ªùi d√πng n√≥i linh tinh, b·∫°n v·∫´n ph·∫£i gi·ªØ h·ªôi tho·∫°i t·ª± nhi√™n v√† t√¨m c√°ch g·∫Øn k·∫øt l·∫°i ch·ªß ƒë·ªÅ v·∫Ω ho·∫∑c s√°ng t·∫°o.
- N·∫øu ng∆∞·ªùi d√πng c√≥ s·∫£n ph·∫©m y√™u th√≠ch (${
        favoriteProducts.length
      } s·∫£n ph·∫©m): ${favoriteProducts
        .map((p) => `${p.artName} (${p.brand}, gi√° $${p.price})`)
        .join("; ")}.
- Ng√¥n ng·ªØ tr·∫£ l·ªùi: theo ng√¥n ng·ªØ ng∆∞·ªùi d√πng nh·∫≠p.
- Gi·ªØ h·ªôi tho·∫°i c√≥ m·∫°ch logic, nh·ªõ n·ªôi dung tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ph·∫£n h·ªìi h·ª£p l√Ω nh∆∞ng khi tr·∫£ l·ªùi, ch·ªâ vi·∫øt c√¢u tr·∫£ l·ªùi m·ªõi, kh√¥ng l·∫∑p l·∫°i h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.
`;

      const chat = await genAI.getGenerativeModel({
        model: "gemini-2.0-flash-exp",
      });

      // 2Ô∏è‚É£ G·ª≠i l·ªãch s·ª≠ h·ªôi tho·∫°i
      const conversationHistory = messages
        .map(
          (m) =>
            `${m.role === "user" ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω"}: ${
              typeof m.text === "string" ? m.text : ""
            }`
        )
        .join("\n");

      const result = await chat.generateContent(
        `${context}\n${conversationHistory}\nNg∆∞·ªùi d√πng: ${input}`
      );
      const aiText = result.response.text();

      // 4Ô∏è‚É£ G·ª£i √Ω s·∫£n ph·∫©m m∆∞·ª£t m√† h∆°n (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
      const parts = aiText.split(/(\[\[.*?\]\])/g);
      // ...existing code...
      const formatted = parts.map((part, i) => {
        const match = part.match(/\[\[(.*?)\]\]/);
        if (match) {
          const name = match[1];
          // Ch·ªâ g·ª£i √Ω n·∫øu l√† s·∫£n ph·∫©m c√≥ trong data
          const product = allProducts.find((p) =>
            p.artName.toLowerCase().includes(name.toLowerCase())
          );
          if (product) {
            // N·∫øu l√† s·∫£n ph·∫©m, b·∫•m v√†o xem chi ti·∫øt
            return (
              <TouchableOpacity
                key={i}
                onPress={() => router.push(`/product/${product.id}` as any)}
                style={{
                  backgroundColor: "#fde68a",
                  paddingHorizontal: 8,
                  paddingVertical: 4,
                  borderRadius: 54,
                  marginVertical: 2,
                }}
              >
                <Text style={{ color: "#92400e", fontWeight: "bold" }}>
                  {product.artName}
                </Text>
              </TouchableOpacity>
            );
          }
          // N·∫øu kh√¥ng ph·∫£i s·∫£n ph·∫©m, KH√îNG render g√¨ c·∫£
          return null;
        }
        return (
          <Text key={i} style={{ color: "#111" }}>
            {part}
          </Text>
        );
      });
      // ...existing code...

      // 5Ô∏è‚É£ Gi·ªõi h·∫°n ƒë·ªô d√†i h·ªôi tho·∫°i
      setMessages((prev) => {
        const newMsgs = [...prev, { role: "assistant", text: formatted }];
        return newMsgs.slice(-10);
      });
    } catch (error) {
      console.error(error);
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          text: "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. H√£y th·ª≠ l·∫°i nh√©!",
        },
      ]);
    } finally {
      setLoading(false);
    }
  }, [input, allProducts, favoriteProducts, messages]);

  return (
    <SafeAreaView className="flex-1 bg-white">
      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        className="flex-1"
      >
        {/* Header */}
        <View className="px-5 pt-4 pb-3">
          <View className="flex-row justify-between items-center">
            <View>
              <Text className="text-2xl font-bold text-gray-900 mb-1">
                AI Assistant
              </Text>
              <View className="flex-row items-center">
                <View className="w-2 h-2 bg-green-500 rounded-full mr-2" />
                <Text className="text-xs text-gray-500">Powered by Gemini</Text>
              </View>
            </View>
            <View className="flex-row gap-3">
              <GradientBackground
                style={{
                  width: 40,
                  height: 40,
                  borderRadius: 20,
                  justifyContent: "center",
                  alignItems: "center",
                }}
                imageStyle={{ borderRadius: 20 }}
              >
                <TouchableOpacity className="w-full h-full justify-center items-center">
                  <Ionicons name="refresh" size={20} color="#FFFFFF" />
                </TouchableOpacity>
              </GradientBackground>
            </View>
          </View>
        </View>

        {/* Messages */}
        <ScrollView ref={scrollViewRef} className="flex-1 px-5 py-4">
          {messages.map((msg, idx) => (
            <View
              key={idx}
              className={`mb-4 ${
                msg.role === "user" ? "items-end" : "items-start"
              }`}
            >
              <View
                className={`max-w-[80%] px-4 py-3 rounded-2xl ${
                  msg.role === "user" ? "" : "bg-gray-100"
                }`}
                style={msg.role === "user" ? {} : {}}
              >
                {msg.role === "user" ? (
                  <GradientBackground
                    style={{
                      borderRadius: 16,
                      paddingHorizontal: 16,
                      paddingVertical: 12,
                    }}
                    imageStyle={{ borderRadius: 16 }}
                  >
                    {Array.isArray(msg.text) ? (
                      msg.text
                    ) : (
                      <Text className="text-base text-white">{msg.text}</Text>
                    )}
                  </GradientBackground>
                ) : (
                  <>
                    {Array.isArray(msg.text) ? (
                      msg.text
                    ) : (
                      <Text className="text-base text-gray-800">
                        {msg.text}
                      </Text>
                    )}
                  </>
                )}
              </View>
              <Text className="text-xs text-gray-400 mt-1">
                {new Date().toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </Text>
            </View>
          ))}
          {loading && (
            <View className="flex-row items-center mb-4">
              <View className="bg-gray-100 px-4 py-3 rounded-2xl">
                <ActivityIndicator size="small" color="#000" />
              </View>
            </View>
          )}
        </ScrollView>

        {/* Input + n√∫t g·ª≠i ·∫£nh */}
        <View
          className="flex-row items-center px-5 py-4"
          style={{ marginBottom: 100 }}
        >
          <View className="flex-1 flex-row items-center bg-gray-100 rounded-full px-4 py-3 mr-3">
            <TextInput
              className="flex-1 text-base text-gray-900"
              placeholder="Type your message..."
              placeholderTextColor="#9CA3AF"
              value={input}
              onChangeText={setInput}
              multiline
              maxLength={500}
            />
            <TouchableOpacity
              onPress={pickImage}
              className="ml-2"
              style={{ padding: 4 }}
            >
              <Ionicons name="image" size={24} color="#6366F1" />
            </TouchableOpacity>
          </View>
          {input.trim() && !loading ? (
            <GradientBackground
              style={{
                width: 48,
                height: 48,
                borderRadius: 24,
                justifyContent: "center",
                alignItems: "center",
              }}
              imageStyle={{ borderRadius: 24 }}
            >
              <TouchableOpacity
                onPress={handleSend}
                disabled={!input.trim() || loading}
                className="w-full h-full justify-center items-center"
              >
                <Ionicons name="send" size={20} color="#FFFFFF" />
              </TouchableOpacity>
            </GradientBackground>
          ) : (
            <TouchableOpacity
              onPress={handleSend}
              disabled={!input.trim() || loading}
              className="w-12 h-12 rounded-full bg-gray-200 justify-center items-center"
            >
              <Ionicons name="send" size={20} color="#9CA3AF" />
            </TouchableOpacity>
          )}
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
